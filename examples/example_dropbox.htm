<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Gesture Scroll Example</title>
  <style>
    #item{
      position: absolute;
      width:80px;
      top:20%;
      left: 20%;
      height: 80px;
      background:gray;
    }
    #cursor{
      position: absolute;
      width:1px;
      height: 1px;
      overflow: visible;
    }
    #cursor svg{
      margin-left: -24.5px;
      margin-top:-24.5px;
    }
    #cursor.grab #open{
        display: none;
    }
    #cursor.grab #grab{
        display: block;
    }
    #cursor #grab{
      display: none;
    }
    #box{
      position: relative;
      border:1px solid #aaa;
    }
    #signal{
      color:green;
    }
</style>
</head>

<body>
  <h1>Drop items into the box</h1>
  <input type="text" id="total">
  <label for="#adjust">
    Confident Level
  </label>
  <input type="number" id='#adjust' value='50'>
  <hr>
  <div id="box">
    <div id="item" >
      item
    </div>
    <div id="cursor" >
      <svg id='open' width='50' height='50' fill="#000000" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" version="1.1" x="0px" y="0px" viewBox="0 0 100 100"><g transform="translate(0,-952.36218)"><path style="font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;baseline-shift:baseline;opacity:1;color:#000000;fill:#000000;fill-opacity:1;stroke:none;stroke-width:4;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Sans;-inkscape-font-specification:Sans" d="m 48,6 c -4.412694,0 -8,3.54752 -8,7.875 l 0,2.3125 C 38.807518,15.48994 37.484439,15 36,15 c -4.412694,0 -8,3.54752 -8,7.875 l 0,14.53125 C 23.482979,38.36619 20,42.20511 20,47 l 0,15 c 0,4.9917 2.764508,9.9589 6,14.4375 3.023051,4.1845 6.486835,7.80905 9,10.34375 L 35,92 c 1.05e-4,1.047169 0.952831,1.999895 2,2 l 34,0 c 1.047169,-1.05e-4 1.999895,-0.952831 2,-2 L 73,81.6875 C 77.318715,77.0445 80,70.8467 80,64 L 80,51 80,30.875 C 80,26.54752 76.41267,23 72,23 c -1.484431,0 -2.807517,0.48995 -4,1.1875 L 68,19.875 C 68,15.54752 64.412694,12 60,12 58.459286,12 57.096908,12.5341 55.875,13.28125 55.549899,9.24201 52.198543,6 48,6 z m 0,4 c 2.341686,0 4,1.69812 4,3.875 L 52,49 c -0.01494,1.056625 0.943269,2.028484 2,2.028484 1.056731,0 2.014943,-0.971859 2,-2.028484 L 56,19.875 C 56,17.69812 57.658314,16 60,16 c 2.341686,0 4,1.69812 4,3.875 L 64,49 c -0.01494,1.056625 0.943269,2.028484 2,2.028484 1.056731,0 2.014943,-0.971859 2,-2.028484 0,0 3.26e-4,-18.16667 0,-18.1875 C 68.032532,28.666789 69.681558,27 72,27 c 2.34171,0 4,1.69812 4,3.875 L 76,51 76,64 C 76,70.1141 73.567493,75.5888 69.59375,79.5625 69.215129,79.936893 68.995947,80.467545 69,81 l 0,9 -30,0 0,-4 C 39.0041,85.467545 38.784871,84.936893 38.40625,84.5625 35.934765,82.091 32.264508,78.26635 29.25,74.09375 26.235492,69.92105 24,65.4034 24,62 l 0,-15 c 0,-2.655327 1.648973,-4.848348 4,-5.65625 L 28,60 c -0.01494,1.056625 0.943269,2.028484 2,2.028484 1.056731,0 2.014943,-0.971859 2,-2.028484 L 32,22.875 C 32,20.69812 33.658314,19 36,19 c 2.341686,0 4,1.69812 4,3.875 C 39.9987,22.91665 40,49 40,49 c -0.01494,1.056625 0.943269,2.028484 2,2.028484 1.056731,0 2.014943,-0.971859 2,-2.028484 L 44,13.875 C 44,11.69812 45.658314,10 48,10 z" transform="translate(0,952.36218)"/></g></svg>
      <svg width='50' height='50' id='grab'  fill="#000000" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" version="1.1" x="0px" y="0px" viewBox="0 0 100 100"><g transform="translate(0,-952.36218)"><path style="text-indent:0;text-transform:none;direction:ltr;block-progression:tb;baseline-shift:baseline;color:#000000;enable-background:accumulate;" d="m 48,971.36218 c -4.156394,0 -7.509716,3.24643 -7.875,7.3125 -1.224926,-0.76394 -2.584059,-1.3125 -4.125,-1.3125 -4.177535,0 -7.539422,3.27964 -7.875,7.375 -4.579945,0.91082 -8.125,4.7854 -8.125,9.625 l 0,8.00002 c 0,4.9917 2.764508,9.9589 6,14.4375 3.023051,4.1845 6.486835,7.809 9,10.3437 l 0,5.2188 c 1.05e-4,1.0471 0.952831,1.9999 2,2 l 34,0 c 1.047169,-10e-5 1.999895,-0.9529 2,-2 l 0,-10.3125 c 4.318715,-4.643 7,-10.8408 7,-17.6875 l 0,-15.00002 c 0,-4.39743 -3.602594,-8 -8,-8 -1.540941,0 -2.900074,0.54856 -4.125,1.3125 -0.365284,-4.06607 -3.718606,-7.3125 -7.875,-7.3125 -1.701519,0 -3.199141,0.6464 -4.5,1.5625 -1.045784,-3.20325 -3.960934,-5.5625 -7.5,-5.5625 z m 0,4 c 2.250594,0 4,1.74941 4,4 l 0,4 c 0,1.10457 0.895431,2 2,2 1.104569,0 2,-0.89543 2,-2 0,-2.25059 1.749406,-4 4,-4 2.250594,0 4,1.74941 4,4 l 0,2 0,4 c 0,1.10457 0.895431,2 2,2 1.104569,0 2,-0.89543 2,-2 0,-2.25063 1.749406,-4 4,-4 2.250594,0 4,1.74937 4,4 l 0,15.00002 c 0,6.1141 -2.432507,11.5888 -6.40625,15.5625 -0.378621,0.3744 -0.597803,0.905 -0.59375,1.4375 l 0,9 -30,0 0,-4 c 0.0041,-0.5325 -0.215129,-1.0631 -0.59375,-1.4375 -2.471485,-2.4715 -6.141742,-6.2962 -9.15625,-10.4688 -3.014508,-4.1727 -5.25,-8.6903 -5.25,-12.0937 l 0,-8.00002 c 0,-2.65523 1.648976,-4.84832 4,-5.65625 l 0,11.65627 c -0.01494,1.0566 0.943269,2.0312 2,2.0312 1.056731,0 2.014943,-0.9746 2,-2.0312 l 0,-15.00002 c 0,-2.25059 1.749406,-4 4,-4 2.250594,0 4,1.74941 4,4 0,1.10457 0.895431,2 2,2 1.104569,0 2,-0.89543 2,-2 l 0,-6 c 0,-2.25059 1.749406,-4 4,-4 z" fill="#000000" fill-opacity="1" stroke="none" marker="none" visibility="visible" display="inline" overflow="visible"/></g></svg>
    </div>
  </div>
</div>
  <script>
    var boundary =50;
  var autoplay = function() {
    function getScripts(urls, callback) {
      var numDone = 0;
      
      function getScript(url, callback) {
        var script = document.createElement('script'),
            head = document.getElementsByTagName('head')[0],
            done = false;
        
          script.src = url;
          script.onload = script.onreadystatechange = function() {
            if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {
              done = true;
              callback();
              script.onload = script.onreadystatechange = null;
              head.removeChild(script);
            }
          };
        
        head.appendChild(script);
      }
      
      function getScriptCallback() {
        if (urls.length > 0) getScript(urls.shift(), getScriptCallback);
        else callback();
      }
      
      getScript(urls.shift(), getScriptCallback);
    }
    
    getScripts([
      './js/compatibility.js',
      '../js/objectdetect.js',
      '../js/palm.js',
      '../js/hand.js',
      './js/jquery-3.2.1.min.js'],
    
      function() {
        $('#adjust').change(function(){
          boundary = $(this).val();
        });
        var canvas = $('<canvas style="position: fixed; z-index: 1001;top: 10px; right: 10px; opacity: 0.9">').get(0),
          context = canvas.getContext('2d'),
          video = document.createElement('video'),
          dragging = false,
          fist_pos_old,
          current_coord,
          box_set = false,
          detector;
        
        document.getElementsByTagName('body')[0].appendChild(canvas);
        
        try {
          compatibility.getUserMedia({video: true}, function(stream) {
            try {
              video.src = compatibility.URL.createObjectURL(stream);
            } catch (error) {
              video.src = stream;
            }
            compatibility.requestAnimationFrame(play);
          }, function (error) {
            alert("WebRTC not available");
          });
        } catch (error) {
          alert(error);
        }
        function hover(cursor,item){
          var cursor_top = cursor.offset().top,
              cursor_left = cursor.offset().left,
              item_pos = item.offset(),
              item_width = item.width(),
              item_height = item.height();
          if(cursor_top >= item_pos.top && cursor_top <= (item_pos.top + item_height))
          if(cursor_left >= item_pos.left && cursor_left <= (item_left.top + item_width))
          return true;
          return false;
        }
        function move_cursor(left,top,dragging){
          cursor =  $('#cursor');
          item = $('#item');
          cursor_pos = cursor.offset();
          cursor.animate({ left: (left)+'px', top: (top) + 'px' },0);
          if(dragging && hover(cursor,item)){
            item.animate({ left: (left)+'px', top: (top) + 'px' },0)
          }
        }
        function play() {
          compatibility.requestAnimationFrame(play);
          if (video.paused) video.play();
          
          if (video.readyState === video.HAVE_ENOUGH_DATA && video.videoWidth > 0) {
            if(!box_set){
              $('#box').width(video.videoWidth);
              $('#box').width(video.videoHeight);
              box_set = true;
            }
            /* Prepare the detector once the video dimensions are known: */
                  if (!detector) {
                  var width = ~~(80 * video.videoWidth / video.videoHeight);
                  var height = 80;
                  
                  detector = new objectdetect.detector(width, height, 1.1, objectdetect.palm);
                  hand_detector = new objectdetect.detector(width, height, 1.01, objectdetect.hand);
                }
              
            /* Draw video overlay: */
            canvas.width = ~~(100 * video.videoWidth / video.videoHeight);
            canvas.height = 100;
            context.drawImage(video, 0, 0, canvas.clientWidth, canvas.clientHeight);
            var palm = 0;
            var fist = 0;
            
            var palms = detector.detect(video,1);;
            var hand = hand_detector.detect(video,1);
            var total ='', add='', hand_pos, fist_pos, palm_pos;
            if(hand[0]){
              hand_pos=hand[0];
              for (var i = hand.length - 1; i >= 0; --i)
                if (hand[i][4] > hand_pos[4]) hand_pos = hand[i];
              add += 'hand-'+hand_pos[4];
            }
           
             
              if(palms[0]){
                palm_pos = palms[0];
                for (var i = palms.length - 1; i >= 0; --i)
                  if (palms[i][4] > palm_pos[4]) palm_pos = palms[i];
                add += 'palm-' + palm_pos[4];
              }
              var sum = 0;
              if(hand_pos){
                if(hand_pos[4]>boundary) sum +=1;
                else sum -= 1;
              }
              if(palm_pos){
                sum -= 1;
              };
              $('#total').val(total+sum+'|'+add);

              if(sum>=0){
                current_coord = hand_pos;
                dragging = true;
                $('#cursor').addClass('grab');
              }else{
                current_coord = palm_pos || hand_pos;
                dragging = false;
                $('#cursor').removeClass('grab');
              }
            if (current_coord) {
              var coord =    current_coord;
              /* Rescale coordinates from detector to video coordinate space: */
              coord[0] *= video.videoWidth / detector.canvas.width;
              coord[1] *= video.videoHeight / detector.canvas.height;
              coord[2] *= video.videoWidth / detector.canvas.width;
              coord[3] *= video.videoHeight / detector.canvas.height;
            
              /* Find coordinates with maximum confidence: 
              var coord = all_detect[0];
              for (var i = coords.length - 1; i >= 0; --i)
                if (coords[i][4] > coord[4]) coord = coords[i];*/
              
              /* Get hand position */
              var fist_pos = [coord[0] + coord[2] / 2, coord[1] + coord[3] / 2];
              /*if (fist_pos_old) {
                var dx = (fist_pos[0] - fist_pos_old[0]) / video.videoWidth,
                    dy = (fist_pos[1] - fist_pos_old[1]) / video.videoHeight;
                
                  window.scrollBy(dx * 200, dy * 200);
              } else fist_pos_old = fist_pos;
              */
              move_cursor(fist_pos[0],fist_pos[1],dragging);
              /* Draw coordinates on video overlay: */
              context.beginPath();
              context.lineWidth = '2';
              if(dragging)
                context.fillStyle = 'rgba(0, 255, 255, 0.5)';
              else
                context.fillStyle = 'rgba(255, 0, 255, 0.5)';
                
              context.fillRect(
                coord[0] / video.videoWidth * canvas.clientWidth,
                coord[1] / video.videoHeight * canvas.clientHeight,
                coord[2] / video.videoWidth * canvas.clientWidth,
                coord[3] / video.videoHeight * canvas.clientHeight);
              context.stroke();
            } else fist_pos_old = null;
          }
        }
      }
    );
  };
  autoplay();
    </script>
</body>
</html>